; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd /home/sebastian/Projects/interpreteBasic/interprete ; lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless ; popd
; Using host:port 127.0.0.1:45333 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉interprete.interprete꞉>  ; Use `alt+enter` to evaluate
clj꞉interprete.interprete꞉> 
; Jack-in done.
clj꞉interprete.interprete꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 180 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; FAIL in interprete.core-test/aplicar-tests (core_test.clj:269):
; aplicar INT retorna la parte entera de un numero
; expected:
4

; actual:
3

; 180 tests finished, problems found. 😭 errors: 0, failures: 1, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Running previously failed tests…
; FAIL in interprete.core-test/aplicar-tests (core_test.clj:269):
; aplicar INT retorna la parte entera de un numero
; expected:
4

; actual:
3

; 2 tests finished, problems found. 😭 errors: 0, failures: 1, ns: 1, vars: 1
clj꞉interprete.core-test꞉> 
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running previously failed tests…
; 2 tests finished, all passing 👍, ns: 1, vars: 1
clj꞉interprete.core-test꞉> 
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
#'interprete.core-test/extraer-data-linea-tests
clj꞉interprete.core-test꞉> 
#'interprete.core-test/continuar-linea-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; FAIL in interprete.core-test/aplicar-tests (form-init818705064698547155.clj:270):
; aplicar INT debe retornar la parte entera de un numero
; expected:
4

; actual:
3

; 180 tests finished, problems found. 😭 errors: 0, failures: 1, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 180 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 181 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
0.8414709848078965
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; ERROR in interprete.core-test/aplicar-tests (core_test.clj:277):
; aplicar SIN debe retornar el seno de un numero
; error: java.lang.ClassCastException: class java.lang.Double cannot be cast to class clojure.lang.IFn (java.lang.Double is in module java.base of loader 'bootstrap'; clojure.lang.IFn is in unnamed module of loader 'app') (core_test.clj:277)
; expected:
((. Math sin 1) (aplicar 'SIN 1 1))

; 182 tests finished, problems found. 😭 errors: 1, failures: 0, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
0.8414709848078965
clj꞉interprete.core-test꞉> 
; Running test: aplicar-tests…
; ERROR in interprete.core-test/aplicar-tests (core_test.clj:277):
; aplicar SIN debe retornar el seno de un numero
; error: java.lang.ClassCastException: class java.lang.Double cannot be cast to class clojure.lang.IFn (java.lang.Double is in module java.base of loader 'bootstrap'; clojure.lang.IFn is in unnamed module of loader 'app') (core_test.clj:277)
; expected:
((. Math sin 1) (aplicar 'SIN 1 1))

; 4 tests finished, problems found. 😭 errors: 1, failures: 0, ns: 1, vars: 1
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 182 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 184 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 186 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 186 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; FAIL in interprete.core-test/aplicar-tests (core_test.clj:292):
; aplicar ASC debe retornar el numero ASCII del primer caracter de la inicial de una cadena
; expected:
73

; actual:
72

; 188 tests finished, problems found. 😭 errors: 0, failures: 1, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 188 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 190 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 193 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; FAIL in interprete.core-test/aplicar-tests (core_test.clj:306):
; aplicar * debe retornar la multiplicacion de dos numeros
; expected:
4

; actual:
6

; 193 tests finished, problems found. 😭 errors: 0, failures: 1, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 193 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 193 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; ERROR in interprete.core-test/aplicar-tests (interprete.clj:309):
; aplicar = debe retornar -1 si dos cadenas son iguales
; error: java.lang.IllegalArgumentException: No matching clause: HOLA (interprete.clj:309)
; expected:
(= -1 (aplicar "HOLA" "HOLA" 1))

; 194 tests finished, problems found. 😭 errors: 1, failures: 0, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 194 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; FAIL in interprete.core-test/aplicar-tests (core_test.clj:309):
; aplicar = debe retornar -1 si dos cadenas son iguales
; expected:
-2

; actual:
-1

; 194 tests finished, problems found. 😭 errors: 0, failures: 1, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; ERROR in interprete.core-test/aplicar-tests (Numbers.java:317):
; aplicar = debe retornar 0 si compara un numero y una cadena
; error: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap') (Numbers.java:317)
; expected:
(= 0 (aplicar '= 1 "HOLA" 1))

; 198 tests finished, problems found. 😭 errors: 1, failures: 0, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 197 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 199 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 200 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 201 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; FAIL in interprete.core-test/aplicar-tests (core_test.clj:276):
; aplicar STR$ debe retornar un numero convertido en cadena
; expected:
"3"

; actual:
" 3"

; 203 tests finished, problems found. 😭 errors: 0, failures: 1, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 203 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 206 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 207 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; ERROR in interprete.core-test/aplicar-tests (Numbers.java:334):
; aplicar AND debe retornar -1 si ambos valores son verdaderos
; error: java.lang.ClassCastException: class java.lang.Boolean cannot be cast to class java.lang.Number (java.lang.Boolean and java.lang.Number are in module java.base of loader 'bootstrap') (Numbers.java:334)
; expected:
(= -1 (aplicar 'AND true true 1))

; 208 tests finished, problems found. 😭 errors: 1, failures: 0, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 208 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 209 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 211 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; FAIL in interprete.core-test/aplicar-tests (core_test.clj:345):
; aplicar OR debe retornar -1 si su primer valor es verdadero
; expected:
-1

; actual:
0

; FAIL in interprete.core-test/aplicar-tests (core_test.clj:347):
; aplicar OR debe retornar -1 si su segundo valor es verdadero
; expected:
-1

; actual:
0

; 215 tests finished, problems found. 😭 errors: 0, failures: 2, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 215 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 215 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
; Syntax error reading source at (core_test.clj:374:41).
; Unmatched delimiter: )
; Evaluation of file core_test.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 219 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; ERROR in interprete.core-test/aplicar-tests (Numbers.java:363):
; aplicar debe retornar -1 si la primera cadena es menor que la segunda
; error: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap') (Numbers.java:363)
; expected:
(= 1 (aplicar '< "ABC" "BCD" 1))

; ERROR in interprete.core-test/aplicar-tests (Numbers.java:365):
; aplicar debe retornar 0 si la primera cadena es igual que la segunda
; error: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap') (Numbers.java:365)
; expected:
(= 0 (aplicar '< "BCD" "BCD" 1))

; ERROR in interprete.core-test/aplicar-tests (Numbers.java:367):
; aplicar debe retornar 0 si la primera cadena es mayor que la segunda
; error: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap') (Numbers.java:367)
; expected:
(= 0 (aplicar '< "BCD" "ABC" 1))

; 225 tests finished, problems found. 😭 errors: 3, failures: 0, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; ERROR in interprete.core-test/aplicar-tests (Numbers.java:363):
; aplicar debe retornar -1 si la primera cadena es menor que la segunda
; error: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap') (Numbers.java:363)
; expected:
(= -1 (aplicar '< "ABC" "BCD" 1))

; ERROR in interprete.core-test/aplicar-tests (Numbers.java:365):
; aplicar debe retornar 0 si la primera cadena es igual que la segunda
; error: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap') (Numbers.java:365)
; expected:
(= 0 (aplicar '< "BCD" "BCD" 1))

; ERROR in interprete.core-test/aplicar-tests (Numbers.java:367):
; aplicar debe retornar 0 si la primera cadena es mayor que la segunda
; error: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap') (Numbers.java:367)
; expected:
(= 0 (aplicar '< "BCD" "ABC" 1))

; 225 tests finished, problems found. 😭 errors: 3, failures: 0, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; ERROR in interprete.core-test/aplicar-tests (Numbers.java:363):
; aplicar debe retornar -1 si la primera cadena es menor que la segunda
; error: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap') (Numbers.java:363)
; expected:
(= -1 (aplicar '< "ABC" "BCD" 1))

; ERROR in interprete.core-test/aplicar-tests (Numbers.java:365):
; aplicar debe retornar 0 si la primera cadena es igual que la segunda
; error: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap') (Numbers.java:365)
; expected:
(= 0 (aplicar '< "BCD" "BCD" 1))

; ERROR in interprete.core-test/aplicar-tests (Numbers.java:367):
; aplicar debe retornar 0 si la primera cadena es mayor que la segunda
; error: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap') (Numbers.java:367)
; expected:
(= 0 (aplicar '< "BCD" "ABC" 1))

; 225 tests finished, problems found. 😭 errors: 3, failures: 0, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; ERROR in interprete.core-test/aplicar-tests (Numbers.java:363):
; aplicar debe retornar -1 si la primera cadena es menor que la segunda
; error: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap') (Numbers.java:363)
; expected:
(= -1 (aplicar '< "ABC" "BCD" 1))

; ERROR in interprete.core-test/aplicar-tests (Numbers.java:365):
; aplicar debe retornar 0 si la primera cadena es igual que la segunda
; error: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap') (Numbers.java:365)
; expected:
(= 0 (aplicar '< "BCD" "BCD" 1))

; ERROR in interprete.core-test/aplicar-tests (Numbers.java:367):
; aplicar debe retornar 0 si la primera cadena es mayor que la segunda
; error: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap') (Numbers.java:367)
; expected:
(= 0 (aplicar '< "BCD" "ABC" 1))

; 225 tests finished, problems found. 😭 errors: 3, failures: 0, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; ERROR in interprete.core-test/aplicar-tests (Numbers.java:363):
; aplicar < debe retornal nil si al menos uno de sus argumentos es una cadena
; error: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap') (Numbers.java:363)
; expected:
(= nil (aplicar '< "HOLA" 2 1))

; 223 tests finished, problems found. 😭 errors: 1, failures: 0, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; ERROR in interprete.core-test/aplicar-tests (Numbers.java:363):
; aplicar < debe retornal nil si al menos uno de sus argumentos es una cadena
; error: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap') (Numbers.java:363)
; expected:
(= nil (aplicar '< "HOLA" 2 1))

; 223 tests finished, problems found. 😭 errors: 1, failures: 0, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; ERROR in interprete.core-test/aplicar-tests (Numbers.java:363):
; aplicar < debe retornar nil si al menos uno de sus argumentos es una cadena
; error: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap') (Numbers.java:363)
; expected:
(nil? (aplicar '< "HOLA" 2 1))

; 223 tests finished, problems found. 😭 errors: 1, failures: 0, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; ERROR in interprete.core-test/aplicar-tests (Numbers.java:363):
; aplicar < debe retornar nil si al menos uno de sus argumentos es una cadena
; error: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap') (Numbers.java:363)
; expected:
(nil? (aplicar '< "HOLA" 2 1))

; 223 tests finished, problems found. 😭 errors: 1, failures: 0, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd /home/sebastian/Projects/interpreteBasic/interprete ; lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless ; popd
; Using host:port 127.0.0.1:43563 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉interprete.interprete꞉> 
clj꞉interprete.interprete꞉> 
; Jack-in done.
clj꞉interprete.interprete꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 223 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; ERROR in interprete.core-test/aplicar-tests (Numbers.java:370):
; aplicar <= debe retornar nil si al menos uno de sus argumentos es una cadena
; error: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap') (Numbers.java:370)
; expected:
(nil? (aplicar '<= "HOLA" 2 1))

; ERROR in interprete.core-test/aplicar-tests (Numbers.java:379):
; aplicar > debe retornar nil si al menos uno de sus argumentos es una cadena
; error: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap') (Numbers.java:379)
; expected:
(nil? (aplicar '> "HOLA" 2 1))

; ERROR in interprete.core-test/aplicar-tests (Numbers.java:388):
; aplicar >= debe retornar nil si al menos uno de sus argumentos es una cadena
; error: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap') (Numbers.java:388)
; expected:
(nil? (aplicar '>= "HOLA" 2 1))

; 235 tests finished, problems found. 😭 errors: 3, failures: 0, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
; Evaluating file: interprete.clj
true
clj꞉interprete.interprete꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/aplicar-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
; 235 tests finished, all passing 👍, ns: 1, vars: 25
clj꞉interprete.core-test꞉> 
