; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Connecting using "undefined" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Aborting jack-in. No project type selected.
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd c:\Users\sebas\Projects\interpreteBasic\interprete & cmd.exe /d /c lein update-in :dependencies conj [nrepl,"1.0.0"] -- update-in :plugins conj [cider/cider-nrepl,"0.28.5"] -- update-in [:repl-options,:nrepl-middleware] conj '["cider.nrepl/cider-middleware"]' -- repl :headless & popd
; Using host:port 127.0.0.1:57744 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉interprete.interprete꞉>  ; Use `alt+enter` to evaluate
clj꞉interprete.interprete꞉> 
; Jack-in done.
clj꞉interprete.interprete꞉> 
; Evaluating file: interprete.clj
true
clj꞉interprete.interprete꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/flatten-primer-nivel-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
?RETURN WITHOUT GOSUB  ERROR IN 20?TYPE MISMATCH  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?DIVISION BY ZERO  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1
; FAIL in interprete.core-test/evaluar-tests (core_test.clj:446):
; evaluar END debe retornar una dupla con :sin-errores y el ambiente
; expected:
(=
 [:sin-errores ['() [:ejecucion-inmediata 0] [] [] [] 0 {}]]
 (evaluar '(END) ['() [:ejecucion-inmediata 0] [] [] [] 0 {}]))

; actual:
(not
 (=
  [:sin-errores [() [:ejecucion-inmediata 0] [] [] [] 0 {}]]
  [:omitir-restante [() [:ejecucion-inmediata 0] [] [] [] 0 {}]]))

; 273 tests finished, problems found. 😭 errors: 0, failures: 1, ns: 1, vars: 27
clj꞉interprete.core-test꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/flatten-primer-nivel-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
?RETURN WITHOUT GOSUB  ERROR IN 20?TYPE MISMATCH  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?DIVISION BY ZERO  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1
; 273 tests finished, all passing 👍, ns: 1, vars: 27
clj꞉interprete.core-test꞉> 
; Evaluating file: interprete.clj
true
clj꞉interprete.interprete꞉> 
; Running all project tests…
expr por preprocesar: (5)
amb para calcular-expresion: [((10 (PRINT X))) [10 1] [] [] [] 0 {}]
expresion preprocesada: (5)
desambiguada: (5)
en rpn: (5)
calculada: 5
expr por preprocesar: (5)
amb para calcular-expresion: [((10 (PRINT X))) [10 1] [] [] [] 0 {X 2}]
expresion preprocesada: (5)
desambiguada: (5)
en rpn: (5)
calculada: 5
expr por preprocesar: (X + 1)
amb para calcular-expresion: [((10 (PRINT X))) [10 1] [] [] [] 0 {X 2}]
expresion preprocesada: (2 + 1)
desambiguada: (2 + 1)
en rpn: (2 1 +)
calculada: 3
expr por preprocesar: (X$ + " MUNDO")
amb para calcular-expresion: [((10 (PRINT X))) [10 1] [] [] [] 0 {X$ "HOLA"}]
expresion preprocesada: ("HOLA" + " MUNDO")
desambiguada: ("HOLA" + " MUNDO")
en rpn: ("HOLA" " MUNDO" +)
calculada: "HOLA MUNDO"
?RETURN WITHOUT GOSUB  ERROR IN 20?TYPE MISMATCH  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?DIVISION BY ZERO  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1expr por preprocesar: ()
amb para calcular-expresion: [() [:ejecucion-inmediata 0] [] [] [] 0 {}]
expresion preprocesada: ()
desambiguada: (nil)
en rpn: (nil)
calculada: nil
expr por preprocesar: (PRINT)
amb para calcular-expresion: [() [:ejecucion-inmediata 0] [] [] [] 0 {}]
expresion preprocesada: (PRINT)
desambiguada: (PRINT)
en rpn: (PRINT)
calculada: PRINT
expr por preprocesar: (5)
amb para calcular-expresion: [() [:ejecucion-inmediata 0] [] [] [] 0 {}]
expresion preprocesada: (5)
desambiguada: (5)
en rpn: (5)
calculada: 5
expr por preprocesar: (5)
amb para calcular-expresion: [() [:ejecucion-inmediata 0] [] [] [] 0 {X 4}]
expresion preprocesada: (5)
desambiguada: (5)
en rpn: (5)
calculada: 5
expr por preprocesar: (.)
amb para calcular-expresion: [() [:ejecucion-inmediata 0] [] [] [] 0 {}]
expresion preprocesada: (0)
desambiguada: (0)
en rpn: (0)
calculada: 0
lista-expr: nil
amb: [() [:ejecucion-inmediata 0] [] [] [] 0 {}]
nueva: ([nil])
interc: [nil]
ex: ((nil))
expresiones: ((nil))
expresiones: ((nil))
amb: [() [:ejecucion-inmediata 0] [] [] [] 0 {}]
expr por preprocesar: (nil)
amb para calcular-expresion: [() [:ejecucion-inmediata 0] [] [] [] 0 {}]
expresion preprocesada: nil
desambiguada: (nil)
en rpn: (nil)
calculada: nil

; 273 tests finished, all passing 👍, ns: 1, vars: 27
clj꞉interprete.interprete꞉> 
; Evaluating file: interprete.clj
true
clj꞉interprete.interprete꞉> 
spy para calcular-expresion
expr por preprocesar: (LEN (symbol "(") "HOLA" (symbol ")"))
amb para calcular-expresion: [() [] [] [] [] 0 {}]
expresion preprocesada: (; Execution error (ClassCastException) at interprete.interprete/preprocesar-expresion$fn (interprete.clj:1101).
; class clojure.lang.PersistentList cannot be cast to class clojure.lang.Named (clojure.lang.PersistentList and clojure.lang.Named are in unnamed module of loader 'app')
clj꞉interprete.core-test꞉> 
spy para calcular-expresion
expr por preprocesar: (LEN (symbol "(") "HOLA" (symbol ")"))
amb para calcular-expresion: [() [] [] [] [] 0 {}]
expresion preprocesada: (; Execution error (ClassCastException) at interprete.interprete/preprocesar-expresion$fn (interprete.clj:1101).
; class clojure.lang.PersistentList cannot be cast to class clojure.lang.Named (clojure.lang.PersistentList and clojure.lang.Named are in unnamed module of loader 'app')
clj꞉interprete.core-test꞉> 
(LEN (symbol "(") "HOLA" (symbol ")"))
clj꞉interprete.core-test꞉> 
spy para calcular-expresion
expr por preprocesar: (LEN ( "HOLA" ))
amb para calcular-expresion: [() [] [] [] [] 0 {}]
expresion preprocesada: (LEN ( "HOLA" ))
desambiguada: (LEN ( "HOLA" ))
en rpn: ("HOLA" LEN)
calculada: 4
4
clj꞉interprete.core-test꞉> 
; Evaluating file: interprete.clj
true
clj꞉interprete.interprete꞉> 
; Running all project tests…
spy para calcular-expresion
expr por preprocesar: (5)
amb para calcular-expresion: [((10 (PRINT X))) [10 1] [] [] [] 0 {}]
expresion preprocesada: (5)
desambiguada: (5)
en rpn: (5)
calculada: 5
spy para calcular-expresion
expr por preprocesar: (5)
amb para calcular-expresion: [((10 (PRINT X))) [10 1] [] [] [] 0 {X 2}]
expresion preprocesada: (5)
desambiguada: (5)
en rpn: (5)
calculada: 5
spy para calcular-expresion
expr por preprocesar: (X + 1)
amb para calcular-expresion: [((10 (PRINT X))) [10 1] [] [] [] 0 {X 2}]
expresion preprocesada: (2 + 1)
desambiguada: (2 + 1)
en rpn: (2 1 +)
calculada: 3
spy para calcular-expresion
expr por preprocesar: (X$ + " MUNDO")
amb para calcular-expresion: [((10 (PRINT X))) [10 1] [] [] [] 0 {X$ "HOLA"}]
expresion preprocesada: ("HOLA" + " MUNDO")
desambiguada: ("HOLA" + " MUNDO")
en rpn: ("HOLA" " MUNDO" +)
calculada: "HOLA MUNDO"
?RETURN WITHOUT GOSUB  ERROR IN 20?TYPE MISMATCH  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?DIVISION BY ZERO  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1spy para calcular-expresion
expr por preprocesar: ()
amb para calcular-expresion: [() [:ejecucion-inmediata 0] [] [] [] 0 {}]
expresion preprocesada: ()
desambiguada: (nil)
en rpn: (nil)
calculada: nil
spy para calcular-expresion
expr por preprocesar: (PRINT)
amb para calcular-expresion: [() [:ejecucion-inmediata 0] [] [] [] 0 {}]
expresion preprocesada: (PRINT)
desambiguada: (PRINT)
en rpn: (PRINT)
calculada: PRINT
spy para calcular-expresion
expr por preprocesar: (5)
amb para calcular-expresion: [() [:ejecucion-inmediata 0] [] [] [] 0 {}]
expresion preprocesada: (5)
desambiguada: (5)
en rpn: (5)
calculada: 5
spy para calcular-expresion
expr por preprocesar: (5)
amb para calcular-expresion: [() [:ejecucion-inmediata 0] [] [] [] 0 {X 4}]
expresion preprocesada: (5)
desambiguada: (5)
en rpn: (5)
calculada: 5
spy para calcular-expresion
expr por preprocesar: (.)
amb para calcular-expresion: [() [:ejecucion-inmediata 0] [] [] [] 0 {}]
expresion preprocesada: (0)
desambiguada: (0)
en rpn: (0)
calculada: 0
spy para segunda definicion de imprimir
lista-expr: nil
amb: [() [:ejecucion-inmediata 0] [] [] [] 0 {}]
nueva: ([nil])
interc: [nil]
ex: ((nil))
expresiones: ((nil))
spy para primera definicion de imprimir
expresiones: ((nil))
amb: [() [:ejecucion-inmediata 0] [] [] [] 0 {}]
spy para calcular-expresion
expr por preprocesar: (nil)
amb para calcular-expresion: [() [:ejecucion-inmediata 0] [] [] [] 0 {}]
expresion preprocesada: nil
desambiguada: (nil)
en rpn: (nil)
calculada: nil

; 273 tests finished, all passing 👍, ns: 1, vars: 27
clj꞉interprete.interprete꞉> 
true
clj꞉interprete.interprete꞉> 
; Evaluating file: interprete.clj
true
clj꞉interprete.interprete꞉> 
true
clj꞉interprete.interprete꞉> 
#'interprete.interprete/nombre-variable-valido?
clj꞉interprete.interprete꞉> 
recibido por nombre-variable-valido?: LEN
; Execution error (UnsupportedOperationException) at interprete.interprete/nombre-variable-valido? (form-init5006662955125648949.clj:875).
; count not supported on this type: Symbol
clj꞉interprete.interprete꞉> 
recibido por nombre-variable-valido?: "LEN"
res rama 2: true
true
clj꞉interprete.interprete꞉> 
; Evaluating file: interprete.clj
recibido por nombre-variable-valido?: "LEN"
not palabra-reservada?: false
res rama 2: false
true
clj꞉interprete.interprete꞉> 
recibido por nombre-variable-valido?: "LEN"
not palabra-reservada?: false
res rama 2: false
false
clj꞉interprete.interprete꞉> 
; Evaluating file: interprete.clj
true
clj꞉interprete.interprete꞉> 
; Evaluating file: core_test.clj
#'interprete.core-test/flatten-primer-nivel-tests
clj꞉interprete.core-test꞉> 
; Running all project tests…
?RETURN WITHOUT GOSUB  ERROR IN 20?TYPE MISMATCH  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?DIVISION BY ZERO  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?TYPE MISMATCH  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1?ILLEGAL QUANTITY  ERROR IN 1
; 273 tests finished, all passing 👍, ns: 1, vars: 27
clj꞉interprete.core-test꞉> 
