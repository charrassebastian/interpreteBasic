(ns interprete.core-test
  (:require [clojure.test :refer :all]
            [interprete.core :refer :all]))

;;(defn generate-palabra-reservada?-tests [lst]
;;  (map (fn [kw] `(is (= true (palabra-reservada? ~kw)))) lst))

(deftest palabra-reservada?-test
  (testing "palabra-reservada?"
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'STR$)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'END)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'LOG)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'IF)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'RETURN)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? '+)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'ATN)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? '<>)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'PRINT)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'LET)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'READ)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? '?)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? '>=)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? '/)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'NEW)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'RESTORE)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'OR)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'LEN)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'CLEAR)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'EXP)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? '-)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'GOSUB)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'AND)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'STEP)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'ON)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? '>)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'GOTO)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? '*)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'THEN)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? '<=)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'ASC)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'CHR$)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'INPUT)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'TO)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'NEXT)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'REM)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'LIST)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'MID$)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'SIN)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? '<)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? '=)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'INT)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'DATA)))
    (clojure.test/is (clojure.core/= true (interprete.core/palabra-reservada? 'FOR)))
    (is (= false (palabra-reservada? 'SPACE)))))
